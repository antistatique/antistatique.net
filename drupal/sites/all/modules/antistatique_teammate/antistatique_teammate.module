<?php
/**
 * @file
 * Code for the antistatique Teammate feature.
 */

include_once 'antistatique_teammate.features.inc';

/**
 * Implements hook_cron().
 * Update PingPong Ranking score
 */
function antistatique_teammate_cron() {
  $scores = antistatique_teammate_get_scores();

  $users = entity_load('user');
  foreach ($users as $user) {
    if($user->uid == 0 || !$user) {
      continue;
    }

    $ranking = antistatique_teammate_find_score_for_user($scores, $user);

    $edit = array(
      'field_pingpong_ranking' => array(
        'und' => array(
          0 => array(
            'value' => $ranking['rank'],
          )
        )
      ),
      'field_pingpong_points' => array(
        'und' => array(
          0 => array(
            'value' => $ranking['points'],
          )
        )
      )
    );

    user_save($user, $edit);
  }
}

/**
 * Return Ping Pong ranking scores via the API
 *
 * @return array
 */
function antistatique_teammate_get_scores()
{
  $host_api = variable_get('antistatique_teammate_pingpong_host_api', 'http://pingpongninja-api.antistatique.io');

  $scores = file_get_contents($host_api);
  if (!$scores) {

    return [];
  }

  $scores = json_decode($scores);

  return $scores;
}

/**
 * Find and return Ping Pong score for a specific user.
 *
 * @param array  $scores
 * @param object $user
 *
 * @return float
 */
function antistatique_teammate_find_score_for_user($scores, $user)
{
  $name = $user->field_firstname['und'][0]['value'];
  $ranking = array();

  foreach ($scores as $score) {
    if (mb_strtolower($name) == mb_strtolower($score->name)) {
      $ranking['points'] = $score->points;
      $ranking['rank'] = $score->rank;
      break;
    }
  }

  return $ranking;
}
