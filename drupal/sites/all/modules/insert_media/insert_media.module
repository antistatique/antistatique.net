<?php
/**
 * @file
 * This module provides the integration between Media and Insert modules.
 */

/**
 * Implements hook_menu().
 */
function insert_media_menu() {
  $items = array();

  $items['insert-media'] = array(
    'title' => 'Insert widget',
    'description' => 'The rendered HTML of the Insert widget',
    'access arguments' => array('access content'),
    'page callback' => 'insert_media_render_insert_widget',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Menu callback function.
 *
 * Renders the HTML of the Insert widget.
 * The main part of the code comes from insert.module
 * insert_element_process() function.
 */
function insert_media_render_insert_widget() {
  static $js_added;
  $element = array();

  // This function loads on an ajax callback. Fetch the $_POST variables.
  $fid = $_POST['fileid'];
  $style_options = $_POST['options']['style_options'];
  $entity_type = $_POST['options']['entity_type'];
  $bundle = $_POST['options']['bundle'];
  $field_name = $_POST['options']['field_name'];
  $element_id = $_POST['options']['element_id'];
  $element_name = $_POST['options']['element_name'];

  // Bail out early if the needed properties aren't available.
  // This happens most frequently when editing a field configuration.
  if (!isset($entity_type)) {
    return '';
  }

  $item = (array) file_load($fid);

  $instance = field_info_instance($entity_type, $field_name, $bundle);

  $widget_settings = $instance['widget']['settings'];
  $widget_type = $instance['widget']['type'];

  // Bail out of Insert is not enabled on this field.
  if (empty($widget_settings['insert'])) {
    return '';
  }

  // Add base settings only once.
  if (!isset($js_added)) {
    $js_added = array();
    $settings = array('fileDirectoryPath' => file_default_scheme());
    drupal_add_js(array('insert' => $settings), 'setting');
    drupal_add_js(drupal_get_path('module', 'insert') . '/insert.js');
  }

  // Add settings for this widget only once.
  if (!isset($js_added[$widget_type])) {
    $js_added[$widget_type] = TRUE;
    $insert_widget = insert_widget_load($widget_type);
    $insert_settings = array(
      'maxWidth' => $widget_settings['insert_width'],
      'wrapper' => $insert_widget['wrapper'],
      'fields' => $insert_widget['fields'],
    );
    drupal_add_js(array('insert' => array('widgets' => array($widget_type => $insert_settings))), 'setting');
  }

  if (isset($field_name)) {
    // Embed the widget in an extra container.
    $element['insert-container'] = array(
      '#type' => 'container',
      '#attributes' => array('class' => array('insert-container')),
    );

    $insert_styles = !empty($widget_settings['insert_styles']['<all>']) ? drupal_map_assoc(array_keys(insert_styles())) : array_filter((array) $widget_settings['insert_styles']);
    $default = !empty($instance['widget']['settings']['insert_default']) ? $widget_settings['insert_default'] : 'auto';
    if (!isset($insert_styles[$default])) {
      $insert_styles[$default] = $default;
    }
    foreach ($insert_styles as $style_name => $enabled) {
      if ($enabled && ($style = insert_style_load($style_name))) {
        $element['insert-container']['insert_templates'][$style_name] = array(
          '#type' => 'hidden',
          '#value' => insert_content($item, $style, $instance['widget']),
          '#id' => $element_id . '-insert-template-' . str_replace('_', '-', $style_name),
          '#name' => $element_name . '[insert_template][' . $style_name . ']',
          '#attributes' => array('class' => array('insert-template')),
        );
        $style_options[$style_name] = $style['label'];
      }

      // Always provide a file name property.
      $element['insert-container']['insert_filename'] = array(
        '#type' => 'hidden',
        '#value' => $item['filename'],
        '#id' => $element_id . '-insert-filename',
        '#name' => $element_name . '[insert_filename]',
        '#attributes' => array('class' => array('insert-filename')),
      );
    }

    $element['insert-container']['insert'] = array(
      '#theme' => 'insert_widget',
      '#type' => 'markup',
      '#options' => $style_options,
      '#widget' => $instance['widget'],
      '#weight' => -3,
      '#default_value' => $default,
    );
  }
  // In case the imagecrop module is enabled on this field we need to insert,
  // the imagecrop widget as well.
  if (module_exists('imagecrop')) {
    $enabled_styles = imagecrop_get_fields_enabled_styles($entity_type, $field_name, $bundle);
    if (count($enabled_styles) != 0) {
      $element['#entity_type'] = $entity_type;
      $element['#bundle'] = $bundle;
      $element['#field_name'] = $field_name;
      $prefix = '<div class="imagecrop form-item" style="display: ' . ($fid ? 'inline-block' : 'none') . '">';
      $markup = imagecrop_linkitem($fid, $element, $enabled_styles);
      $element['preview']['#suffix'] = $prefix . $markup . '</div>';
    }
  }

  print drupal_render($element);
}

/**
 * Implements hook_insert_widgets().
 */
function insert_media_insert_widgets() {
  return array(
    'media_generic' => array(
      'element_type' => 'media',
      'wrapper' => '.media-widget',
      'fields' => array(
        'alt' => 'input[name$="[alt]"], textarea[name$="[alt]"]',
        'title' => 'input[name$="[title]"], textarea[name$="[title]"]',
        'description' => 'input[name$="[description]"], textarea[name$="[description]"]',
      ),
    ),
  );
}

/**
 * Implements hook_element_info_alter().
 */
function insert_media_element_info_alter(&$elements) {
  $elements['media']['#process'][] = 'insert_media_media_element_process';
  $elements['media']['#after_build'][] = 'insert_media_insert_element_process';
}

/**
 * Implements hook_theme_registry_alter().
 */
function insert_media_theme_registry_alter(&$theme_registry) {
  $path = drupal_get_path('module', 'insert_media');
  if ($theme_registry['media_thumbnail']) {
    $theme_registry['media_thumbnail']['file'] = "{$path}/insert_media.module";
    $theme_registry['media_thumbnail']['theme path'] = $path;
    $theme_registry['media_thumbnail']['function'] = 'insert_media_media_thumbnail';
  }
}

/**
 * Alter the default theme_media_thumbnail.
 *
 * We need to add to the thumbnail output the image file id for ajax callback.
 * The main part of the code comes from media/includes/media.theme.inc file.
 */
function insert_media_media_thumbnail($variables) {
  $label = '';
  $element = $variables['element'];
  $destination = drupal_get_destination();

  // Wrappers to go around the thumbnail.
  $prefix = '<div class="media-item"><div class="media-thumbnail">';
  $suffix = '</div></div>';

  // Arguments for the thumbnail link.
  $thumb = $element['#children'];
  $target = 'media/' . $element['#file']->fid . '/edit';
  $options = array(
    'query' => $destination,
    'html' => TRUE,
    'attributes' => array(
      'title' => t('Click to edit details'),
    ),
  );

  // Element should be a field renderable array.
  // This is a little wonky - admitted.
  if (!empty($element['#show_names']) && $element['#name']) {
    // Add ref attribute to hold the value of the image file id.
    $label = '<div class="label-wrapper"><label class="media-filename" ref="' . $element['#file']->fid . '">' . $element['#name'] . '</label></div>';
  }

  drupal_add_css(drupal_get_path('module', 'media') . '/css/media.css');

  $output = $prefix;
  if (!empty($element['#add_link'])) {
    $output .= l($thumb, $target, $options);
  }
  else {
    $output .= $thumb;
  }
  $output .= $label . $suffix;
  return $output;
}

/**
 * Implements hook_file_download().
 *
 * For some reason the media module should implements this hook,
 * but for some reason it didn't.
 * In case the file saving path is private, the uploaded file thumbnail doesn't
 * appears due to some header issue.
 */
function insert_media_file_download($uri) {
  $info = image_get_info($uri);
  return array('Content-Type' => $info['mime_type']);
}

/**
 * Add an extra process function to the media element.
 */
function insert_media_media_element_process(&$element, &$form_state, $form) {
  $style_options = array();

  $instance = field_info_instance($element['#entity_type'], $element['#field_name'], $element['#bundle']);
  $widget_settings = $instance['widget']['settings'];

  // Bail out of Insert is not enabled on this field.
  if (empty($widget_settings['insert']) || $widget_settings['insert'] == 0) {
    return $element;
  }

  $insert_styles = !empty($widget_settings['insert_styles']['<all>']) ? drupal_map_assoc(array_keys(insert_styles())) : array_filter((array) $widget_settings['insert_styles']);
  $default = !empty($instance['widget']['settings']['insert_default']) ? $widget_settings['insert_default'] : 'auto';

  if (!isset($insert_styles[$default])) {
    $insert_styles[$default] = $default;
  }
  // Fetch the available options settings.
  foreach ($insert_styles as $style_name => $enabled) {
    if ($enabled && ($style = insert_style_load($style_name))) {
      $style_options[$style_name] = $style['label'];
    }
  }
  // Alter the media.js file.
  drupal_add_js(drupal_get_path('module', 'insert_media') . '/js/insert_media.js', array('scope' => 'footer', 'weight' => 5));
  // Add custom settings to the javascript.
  drupal_add_js(array(
    'insert_media' => array(
      $element['#field_name'] => array(
        'style_options' => $style_options,
        'entity_type' => $element['#entity_type'],
        'field_name' => $element['#field_name'],
        'bundle' => $element['#bundle'],
        'element_id' => $element['#id'],
        'element_name' => $element['#name'],
      ),
    ),
  ), 'setting');

  return $element;
}

/**
 * Add an extra process function for the insert elements.
 *
 * Groups the insert widget in a container.
 */
function insert_media_insert_element_process($element) {
  // Set the file ID.
  $element['#attributes']['ref'][] = $element['#field_name'];

  if (isset($element['insert']) &&
    isset($element['insert_templates']) &&
    isset($element['insert_filename'])) {

    $element['insert-container'] = array(
      '#type' => 'container',
      '#attributes' => array('class' => array('insert-container')),
    );

    $element['insert-container']['insert'] = $element['insert'];
    $element['insert-container']['insert_templates'] = $element['insert_templates'];
    $element['insert-container']['insert_filename'] = $element['insert_filename'];

    unset($element['insert']);
    unset($element['insert_templates']);
    unset($element['insert_filename']);
  }

  return $element;
}

